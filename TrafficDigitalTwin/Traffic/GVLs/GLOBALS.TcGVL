<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <GVL Name="GLOBALS" Id="{2d257158-6551-450b-9c5f-577694e5a379}">
    <Declaration><![CDATA[{attribute 'qualified_only'}
VAR_GLOBAL

// Settings for all crossroads.
// They indicate what number of cars should pass through specified parts of them when the modifier is 1.0.
// For example, setting nAHxSR to 100 on Mondays should result in 90 cars passing through at 17:00 and only 10 at 4:00.
// x - horizontal part
// y - vertical part
// SR - straights and rights
// L - lefts
nAHxSR, nAHySR, nAHxL, nAHyL : INT := 10;
nBCxSR, nBCySR, nBCxL, nBCyL : INT := 15;
nDExSR, nDEySR, nDExL, nDEyL : INT := 20;
nFGxSR, nFGySR, nFGxL, nFGyL : INT := 25;

// Depending on the time of day and day of week, this modifier will change from 0.0 for when there is no traffic to 1.0 at rush hours.
rModifier : REAL;

// Weights are the final product of: nBaseWeightXX + nBaseWeightXX * floor({crossroad setting} * rModifier)
// This is the time in seconds required to pass through a node.
nWeightAHxSR : INT;
nWeightAHySR : INT;
nWeightAHxL  : INT;
nWeightAHyL  : INT;

nWeightBCxSR : INT;
nWeightBCySR : INT;
nWeightBCxL  : INT;
nWeightBCyL  : INT;

nWeightDExSR : INT;
nWeightDEySR : INT;
nWeightDExL  : INT;
nWeightDEyL  : INT;

nWeightFGxSR : INT;
nWeightFGySR : INT;
nWeightFGxL  : INT;
nWeightFGyL  : INT;

// Adjacent nodes in adjacency lists. For example, stNode1to16 indicates the time required to get from node 1 to its adjacent node 16.
// ----- RIGHTS -----
//RIGHTS AH
stNode1to16  : ST_ADJNODE := (nNode:=16, nWeight:=ADR(nWeightAHySR));
stNode17to2  : ST_ADJNODE := (nNode:=2,  nWeight:=ADR(nWeightAHxSR));
stNode23to18 : ST_ADJNODE := (nNode:=18, nWeight:=ADR(nWeightAHySR));
stNode15to24 : ST_ADJNODE := (nNode:=24, nWeight:=ADR(nWeightAHxSR));
//RIGHTS BC
stNode3to17  : ST_ADJNODE := (nNode:=17, nWeight:=ADR(nWeightBCySR));
stNode5to4   : ST_ADJNODE := (nNode:=4,  nWeight:=ADR(nWeightBCxSR));
stNode20to6  : ST_ADJNODE := (nNode:=6,  nWeight:=ADR(nWeightBCySR));
stNode18to19 : ST_ADJNODE := (nNode:=19, nWeight:=ADR(nWeightBCxSR));
//RIGHTS DE
stNode19to21 : ST_ADJNODE := (nNode:=21, nWeight:=ADR(nWeightDEySR));
stNode7to20  : ST_ADJNODE := (nNode:=20, nWeight:=ADR(nWeightDExSR));
stNode9to8   : ST_ADJNODE := (nNode:=8,  nWeight:=ADR(nWeightDEySR));
stNode22to10 : ST_ADJNODE := (nNode:=10, nWeight:=ADR(nWeightDExSR));
//RIGHTS FG
stNode24to14 : ST_ADJNODE := (nNode:=14, nWeight:=ADR(nWeightFGySR));
stNode21to23 : ST_ADJNODE := (nNode:=23, nWeight:=ADR(nWeightFGxSR));
stNode11to22 : ST_ADJNODE := (nNode:=22, nWeight:=ADR(nWeightFGySR));
stNode13to12 : ST_ADJNODE := (nNode:=12, nWeight:=ADR(nWeightFGxSR));
// ----- STRAIGHTS -----
//STRAIGHTS AH
stNode1to24  : ST_ADJNODE := (nNode:=24, nWeight:=ADR(nWeightAHySR));
stNode23to2  : ST_ADJNODE := (nNode:=2,  nWeight:=ADR(nWeightAHySR));
stNode17to16 : ST_ADJNODE := (nNode:=16, nWeight:=ADR(nWeightAHxSR));
stNode15to18 : ST_ADJNODE := (nNode:=18, nWeight:=ADR(nWeightAHxSR));
//STRAIGHTS BC
stNode3to19 : ST_ADJNODE := (nNode:=19, nWeight:=ADR(nWeightBCySR));
stNode20to4 : ST_ADJNODE := (nNode:=4,  nWeight:=ADR(nWeightBCySR));
stNode5to17 : ST_ADJNODE := (nNode:=17, nWeight:=ADR(nWeightBCxSR));
stNode18to6 : ST_ADJNODE := (nNode:=6,  nWeight:=ADR(nWeightBCxSR));
//STRAIGHTS DE
stNode19to10 : ST_ADJNODE := (nNode:=10, nWeight:=ADR(nWeightDEySR));
stNode9to20  : ST_ADJNODE := (nNode:=20, nWeight:=ADR(nWeightDEySR));
stNode7to21  : ST_ADJNODE := (nNode:=21, nWeight:=ADR(nWeightDExSR));
stNode22to8  : ST_ADJNODE := (nNode:=8,  nWeight:=ADR(nWeightDExSR));
//STRAIGHTS FG
stNode24to12 : ST_ADJNODE := (nNode:=12, nWeight:=ADR(nWeightFGySR));
stNode11to23 : ST_ADJNODE := (nNode:=23, nWeight:=ADR(nWeightFGySR));
stNode21to14 : ST_ADJNODE := (nNode:=14, nWeight:=ADR(nWeightFGxSR));
stNode13to22 : ST_ADJNODE := (nNode:=22, nWeight:=ADR(nWeightFGxSR));
// ----- LEFTS -----
//LEFTS AH
stNode1to18  : ST_ADJNODE := (nNode:=18, nWeight:=ADR(nWeightAHyL));
stNode15to2  : ST_ADJNODE := (nNode:=2,  nWeight:=ADR(nWeightAHxL));
stNode17to24 : ST_ADJNODE := (nNode:=24, nWeight:=ADR(nWeightAHxL));
stNode23to16 : ST_ADJNODE := (nNode:=16, nWeight:=ADR(nWeightAHyL));
//LEFTS BC
stNode3to6   : ST_ADJNODE := (nNode:=6,  nWeight:=ADR(nWeightBCyL));
stNode18to4  : ST_ADJNODE := (nNode:=4,  nWeight:=ADR(nWeightBCxL));
stNode5to19  : ST_ADJNODE := (nNode:=19, nWeight:=ADR(nWeightBCxL));
stNode20to17 : ST_ADJNODE := (nNode:=17, nWeight:=ADR(nWeightBCyL));
//LEFTS DE
stNode19to8  : ST_ADJNODE := (nNode:=8,  nWeight:=ADR(nWeightDEyL));
stNode22to20 : ST_ADJNODE := (nNode:=20, nWeight:=ADR(nWeightDExL));
stNode7to10  : ST_ADJNODE := (nNode:=10, nWeight:=ADR(nWeightDExL));
stNode9to21  : ST_ADJNODE := (nNode:=21, nWeight:=ADR(nWeightDEyL));
//LEFTS FG
stNode24to22 : ST_ADJNODE := (nNode:=22, nWeight:=ADR(nWeightFGyL));
stNode13to23 : ST_ADJNODE := (nNode:=23, nWeight:=ADR(nWeightFGxL));
stNode21to12 : ST_ADJNODE := (nNode:=12, nWeight:=ADR(nWeightFGxL));
stNode11to14 : ST_ADJNODE := (nNode:=14, nWeight:=ADR(nWeightFGyL));

// Adjacency lists for all nodes that can act as sources. Note that there are no lists for destination-only nodes,
// namely nodes 2, 4, 6, 8, 10, 12, 14, 16.
stNodesFrom1  : ST_ADJLIST := (aAdjNodes:=[ADR(stNode1to16),  ADR(stNode1to18),  ADR(stNode1to24)]);
stNodesFrom3  : ST_ADJLIST := (aAdjNodes:=[ADR(stNode3to17),  ADR(stNode3to19),  ADR(stNode3to6)]);
stNodesFrom5  : ST_ADJLIST := (aAdjNodes:=[ADR(stNode5to17),  ADR(stNode5to19),  ADR(stNode5to4)]);
stNodesFrom7  : ST_ADJLIST := (aAdjNodes:=[ADR(stNode7to10),  ADR(stNode7to20),  ADR(stNode7to21)]);
stNodesFrom9  : ST_ADJLIST := (aAdjNodes:=[ADR(stNode9to20),  ADR(stNode9to21),  ADR(stNode9to8)]);
stNodesFrom11 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode11to14), ADR(stNode11to22), ADR(stNode11to23)]);
stNodesFrom13 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode13to12), ADR(stNode13to22), ADR(stNode13to23)]);
stNodesFrom15 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode15to18), ADR(stNode15to2),  ADR(stNode15to24)]);
stNodesFrom17 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode17to16), ADR(stNode17to2),  ADR(stNode17to24)]);
stNodesFrom18 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode18to19), ADR(stNode18to4),  ADR(stNode18to6)]);
stNodesFrom19 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode19to10), ADR(stNode19to21), ADR(stNode19to8)]);
stNodesFrom20 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode20to17), ADR(stNode20to4),  ADR(stNode20to6)]);
stNodesFrom21 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode21to12), ADR(stNode21to14), ADR(stNode21to23)]);
stNodesFrom22 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode22to10), ADR(stNode22to20), ADR(stNode22to8)]);
stNodesFrom23 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode23to16), ADR(stNode23to18), ADR(stNode23to2)]);
stNodesFrom24 : ST_ADJLIST := (aAdjNodes:=[ADR(stNode24to12), ADR(stNode24to14), ADR(stNode24to22)]);

// Adjacency graph. Note that destination-only nodes have no adjacency lists; their address is set to 0 and is ignored when searching.
stGraph : ST_GRAPH := (aAdjLists:=[
ADR(stNodesFrom1),
0,
ADR(stNodesFrom3),
0,
ADR(stNodesFrom5),
0,
ADR(stNodesFrom7),
0,
ADR(stNodesFrom9),
0,
ADR(stNodesFrom11),
0,
ADR(stNodesFrom13),
0,
ADR(stNodesFrom15),
0,
ADR(stNodesFrom17),
ADR(stNodesFrom18),
ADR(stNodesFrom19),
ADR(stNodesFrom20),
ADR(stNodesFrom21),
ADR(stNodesFrom22),
ADR(stNodesFrom23),
ADR(stNodesFrom24)]);

// Nodes for the Dijkstra algorithm search.
nStartPosition : INT := 1;
nEndPosition: INT := 2;

// List of all distances from nStartPosition
aDistances : ARRAY[1..24] OF INT;

// List of traveled nodes from nStartPosition to nEndPosition
aRoadFlags : ARRAY[1..24] OF BOOL;

END_VAR]]></Declaration>
  </GVL>
</TcPlcObject>